-> String
-> BreakOut Session
-> Function
-> Break
-> Playwright Introduction


ClassRoom:
let input="Learn String and Function"
Split word 
print resever 

output : Function and String Learn


Types of Functions:

JavaScript functions can be classified into several types based on their declaration and usage.

Function Declaration: A standard way to define a function.
function add(a, b) {
    return a + b;
}


Function Expression: A function can also be defined using an expression and can be anonymous.
const multiply = function(a, b) {
    return a * b;
};

//variableName call function
multiply()


Arrow Function: A shorter syntax for writing functions, introduced in ES6.
const subtract = (a, b) => a - b;

//
subtract(6,4)

Anonymous Function: Functions without a name, often used in function expressions.
setTimeout(function() {
    console.log("This is an anonymous function");
}, 1000);


Callback and Callback Hell
A callback is a function passed into another function as an argument to be executed later.

Callback Hell, also known as the pyramid of doom, is a situation where callbacks 
are nested within other callbacks several levels deep, making the code hard to read and maintain.
function
Asynchronous JavaScript
Promises
A Promise is an object representing the eventual completion or failure of an asynchronous operation.

let myPromise = new Promise(function(resolve, reject) {
    setTimeout(() => resolve("Data received"), 3000);
});

3 states:

resolve  -> operation completed successful
reject  -> operation failure
pending ->initial state, neither resolve (fulfilled) or reject(rejected)

resolve-> then =>successful completed(then)

reject-> catch => failure states(catch)

convert Promise to Async/Await




Async/Await
async and await are syntactic sugar built on top of promises. They make asynchronous 
code look and behave a little more like synchronous code.

async function fetchData() {
    let data = await fetch('https://api.leaftaps.com/data');
    console.log(data);
}